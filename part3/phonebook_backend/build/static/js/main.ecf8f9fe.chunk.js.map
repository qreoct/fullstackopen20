{"version":3,"sources":["components/PersonForm.js","components/Filter.js","components/Person.js","components/Notification.js","services/persons.js","App.js","index.js"],"names":["PersonForm","props","nameVal","nameHandler","numberVal","numberHandler","btnHandler","type","value","onChange","onClick","Filter","filterVal","filterHandler","Person","name","number","handleDel","Notification","message","includes","className","baseUrl","axios","get","then","res","data","newObject","post","id","put","delete","App","useState","persons","setPersons","newName","setNewName","newNumber","setNewNumber","filter","setFilter","setMessage","useEffect","personService","displayList","person","toLowerCase","indexOf","e","target","preventDefault","alert","map","window","confirm","newPerson","newPersonID","find","p","changedPerson","setTimeout","catch","err","concat","console","log","i","key","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ecf8f9fe.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst PersonForm = (props) => {\r\n  const nameVal = props.nameVal\r\n  const nameHandler = props.nameHandler\r\n  const numberVal = props.numberVal\r\n  const numberHandler = props.numberHandler\r\n  const btnHandler = props.btnHandler\r\n  return(\r\n      <form>\r\n        <div>\r\n          name: <input type=\"text\" value={nameVal} onChange={nameHandler}/>\r\n        </div>\r\n        <div>\r\n          number: <input type=\"number\" value={numberVal} onChange={numberHandler}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" onClick={btnHandler}>add</button>\r\n        </div>\r\n      </form>\r\n  )\r\n}\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = (props) => {\r\n  const filterVal = props.filterVal\r\n  const filterHandler = props.filterHandler\r\n  return(\r\n  \t<div>\r\n      <input type=\"text\" value={filterVal} onChange={filterHandler} /> \r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Person = (props) => {\r\n  const {name,number,handleDel} = props\r\n  return(\r\n  \t<div>\r\n      <span> {name}, {number} </span> \r\n      <button onClick = {handleDel} > delete </button>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Person","import React from 'react'\r\n\r\nconst Notification = (props) => {\r\n\tconst {message} = props\r\n\r\n\tif (message === null) {\r\n\t\treturn null\r\n\t}\r\n\telse if(message.includes(\"ERROR\")){\r\n\t\treturn(\r\n\t\t\t<div className=\"notification_err\">\r\n\t\t\t\t{message}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\telse{\r\n\t\treturn(\r\n\t\t\t<div className=\"notification\">\r\n\t\t\t\t{message}\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default Notification","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const req = axios.get(baseUrl)\r\n  return req.then((res) => res.data)\r\n}\r\n\r\nconst create = (newObject) => {\r\n  const req = axios.post(baseUrl, newObject)\r\n  return req.then((res) => res.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const req = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return req.then((res) => res.data)\r\n}\r\n\r\nconst del = (id) => {\r\n\tconst req = axios.delete(`${baseUrl}/${id}`)\r\n\treturn req.then((res) => res.data)\r\n}\r\n\r\n\r\nexport default { getAll, create, update, del}","import React, { useState, useEffect } from 'react'\r\nimport PersonForm from './components/PersonForm.js'\r\nimport Filter from './components/Filter.js'\r\nimport Person from './components/Person.js'\r\nimport Notification from './components/Notification.js'\r\nimport personService from './services/persons.js'\r\n\r\nconst App = () => {\r\n  const [ persons, setPersons] = useState([]) \r\n  const [ newName, setNewName ] = useState('')\r\n  const [ newNumber, setNewNumber ] = useState('')\r\n  const [ filter, setFilter ] = useState('')\r\n  const [ message, setMessage ] = useState(null) \r\n\r\n  const handleName = (e) => {\r\n    setNewName(e.target.value)\r\n  }\r\n  const handleNumber = (e) => {\r\n    setNewNumber(e.target.value)\r\n  }\r\n  const handleFilter = (e) => {\r\n    setFilter(e.target.value)\r\n    console.log(filter)\r\n  }\r\n\r\n  useEffect(() => {\r\n    personService\r\n      .getAll()\r\n      .then((res)=>{\r\n        setPersons(res)\r\n      })\r\n  }, [])\r\n\r\n\r\n  const displayList = filter\r\n  // 1. runs a filter function on the persons array of objects\r\n  // 2. take each name and turn it to lowercase, check if it contains the query (var called 'filter')\r\n  //    by using indexOf, so it searches the whole string for substring of query\r\n  // 3. if indexOf doesn't find anything, it will return -1\r\n    ? persons.filter((person) => person.name.toLowerCase().indexOf(filter.toLowerCase()) !== -1)\r\n    : persons\r\n\r\n  const addPerson = (e) => {\r\n    e.preventDefault()\r\n    if (!newName || !newNumber) {\r\n      alert('Please make sure all fields are filled!')\r\n      return 0\r\n    }\r\n    if (persons.map((person) => person.name).includes(newName)){\r\n      // 1. make a new array (using map method) from the persons array containing only names\r\n      // 2. using Array.includes() to check if newName already exists in current list of names\r\n      \r\n      if (window.confirm(`${newName} already exists in records! Update number?`)){\r\n        const newPerson = {\r\n          name: newName, //or just newName\r\n          number: newNumber\r\n        }\r\n        const newPersonID = persons.find((p) => p.name === newName).id\r\n        personService\r\n          .update(newPersonID, newPerson)\r\n          .then((changedPerson) => {\r\n            setPersons(persons.map( p => p.id !== newPersonID ? p : changedPerson))\r\n            setMessage(`Number for ${newName} was updated!`)\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 2000)\r\n          })\r\n          .catch(err =>{\r\n            setMessage(`ERROR: Person ${newName} was already removed!`)\r\n            setPersons(persons.filter( p => p.id !== newPersonID))\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 10000)\r\n          })\r\n      }\r\n      // reset fields\r\n      setNewName('')\r\n      setNewNumber('')\r\n    }else{\r\n      const newPerson = {\r\n        name: newName,\r\n        number: newNumber\r\n      }\r\n\r\n      personService\r\n        .create(newPerson)\r\n        .then((res) => {\r\n          setPersons(persons.concat(res))\r\n          setNewName('')\r\n          setNewNumber('')\r\n          setMessage(`New person ${newName} was added!`)\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n            }, 2000)\r\n        })\r\n        .catch((e) => {\r\n          setMessage(`ERROR: Name must have at least 3 characters. Number must have at least 8 characters`)\r\n            setTimeout(() => {\r\n              setMessage(null)\r\n          }, 2000)})\r\n    }\r\n  }\r\n\r\n  const delPerson = (id) => {\r\n    // find and get the name of the person whose id is the current id\r\n    if (window.confirm(`Are you sure to delete ${persons.find(p => p.id === id).name}?`)){\r\n      personService\r\n        .del(id)\r\n        .then( (res) => {\r\n          // make new array of persons where only id is excluded\r\n          setPersons(persons.filter((p) => p.id !== id))\r\n        })\r\n      console.log(`i have deleted ${id}!`)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Notification message={message}/>\r\n      <h3> Add new person </h3>\r\n      <PersonForm nameVal = {newName} nameHandler = {handleName}\r\n                  numberVal = {newNumber} numberHandler = {handleNumber}\r\n                  btnHandler = {addPerson} />\r\n      <h3>Filter by name</h3>\r\n      <Filter filterVal={filter} filterHandler = {handleFilter} />\r\n      <h3>Contacts</h3>\r\n\r\n      {displayList.map((person, i) => \r\n        <Person key = {i} name = {person.name} number = {person.number} \r\n                handleDel = {() => delPerson(person.id)}/>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App.js'\nimport './index.css'\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}